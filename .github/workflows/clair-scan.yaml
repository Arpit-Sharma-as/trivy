name: Clair Vulnerability Scan

on:
  workflow_dispatch:
    inputs:
      image-name:
        description: "Name for the Docker image (e.g., myapp)"
        required: true
        default: "myapp"
      image-tag:
        description: "Tag for the Docker image"
        required: true
        default: "latest"

jobs:
  clair-pipeline:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Build Docker image
      - name: Build Docker image
        run: |
          IMAGE=${{ github.event.inputs.image-name }}:${{ github.event.inputs.image-tag }}
          echo "Building Docker image: $IMAGE"
          docker build -t $IMAGE .

      # 3️⃣ Install clairctl (client for Clair API)
      - name: Install clairctl
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - run: |
          go install github.com/quay/clair/v4/cmd/clairctl@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # 4️⃣ Start Clair in combo mode (API + Indexer + Matcher + Postgres)
      - name: Start Clair
        run: |
          git clone https://github.com/quay/clair.git
          cd clair
          docker compose -f docker-compose.yaml up -d

      # 5️⃣ Wait for Clair matcher to be ready
      - name: Wait for Matcher
        run: |
          for i in {1..40}; do
            if curl -s http://localhost:6060/health/matcher | grep "ok"; then
              echo "✅ Matcher is ready!"
              exit 0
            fi
            echo "⏳ Waiting for Matcher..."
            sleep 15
          done
          echo "❌ Matcher not ready in time" >&2
          exit 1

      # 6️⃣ Push the built image to Clair for indexing
      - name: Push image to Clair
        run: |
          IMAGE=${{ github.event.inputs.image-name }}:${{ github.event.inputs.image-tag }}
          clairctl push \
            --host http://localhost:6060 \
            $IMAGE

      # 7️⃣ Run vulnerability scan
      - name: Scan image with Clair
        run: |
          IMAGE=${{ github.event.inputs.image-name }}:${{ github.event.inputs.image-tag }}
          clairctl report \
            --host http://localhost:6060 \
            -o json $IMAGE \
            > clair-report.json

      # 8️⃣ Upload scan report
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: clair-report
          path: clair-report.json