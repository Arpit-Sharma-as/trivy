name: Flexible Clair Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Choose what to scan (dockerfile or image)"
        required: true
        default: "dockerfile"
        type: choice
        options:
          - dockerfile
          - image
      dockerfile_path:
        description: "Path to Dockerfile (used if scan_type=dockerfile)"
        required: false
        default: "./Dockerfile"
      image_url:
        description: "Remote image URL (used if scan_type=image, e.g., nginx:latest or username/app:tag)"
        required: false
        default: ""

jobs:
  clair-scan:
    runs-on: ubuntu-latest

    steps:
      # Validate inputs
      - name: Validate workflow inputs
        run: |
          if [[ "${{ github.event.inputs.scan_type }}" == "dockerfile" ]]; then
            if [[ -z "${{ github.event.inputs.dockerfile_path }}" ]]; then
              echo "Error: You must provide a Dockerfile path when scan_type is 'dockerfile'." >&2
              exit 1
            fi
            if [[ -n "${{ github.event.inputs.image_url }}" ]]; then
              echo "Error: Do not provide an image URL when scan_type is 'dockerfile'." >&2
              exit 1
            fi
          elif [[ "${{ github.event.inputs.scan_type }}" == "image" ]]; then
            if [[ -z "${{ github.event.inputs.image_url }}" ]]; then
              echo "Error: You must provide an image URL when scan_type is 'image'." >&2
              exit 1
            fi
            if [[ "${{ github.event.inputs.dockerfile_path }}" != "./Dockerfile" ]]; then
              echo "Error: Do not provide a Dockerfile path when scan_type is 'image'." >&2
              exit 1
            fi
          fi
      # Checkout repo only if Dockerfile path is used
      - name: Checkout repository
        if: ${{ github.event.inputs.scan_type == 'dockerfile' }}
        uses: actions/checkout@v4

      # ✅ Install prerequisites
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose jq curl golang-go
      # ✅ Setup Clair
      - name: Setup Clair
        run: |
          mkdir -p clair/data
          curl -L -o clair/data/repository-to-cpe.json https://access.redhat.com/security/data/metrics/repository-to-cpe.json
          cat > clair/clair-config.yaml <<'EOF'
          http_listen_addr: "0.0.0.0:6060"
          introspection_addr: "0.0.0.0:6061"
          log_level: "info"
          indexer:
            connstring: "host=db port=5432 user=clair password=clair dbname=clair sslmode=disable"
            migrations: true
            scanner:
              repo:
                rhel-repository-scanner:
                  repo2cpe_mapping_file: /data/repository-to-cpe.json
          matcher:
            connstring: "host=db port=5432 user=clair password=clair dbname=clair sslmode=disable"
            migrations: true
            period: "2h"
          notifier:
            connstring: "host=db port=5432 user=clair password=clair dbname=clair sslmode=disable"
            migrations: true
            disable_summary: true
          EOF
          cat > clair/docker-compose.yaml <<'EOF'
          version: "3.8"
          services:
            db:
              image: postgres:15
              environment:
                POSTGRES_USER: clair
                POSTGRES_PASSWORD: clair
                POSTGRES_DB: clair
              volumes:
                - pgdata:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U clair -d clair"]
                interval: 5s
                timeout: 3s
                retries: 20
            clair:
              image: quay.io/projectquay/clair:4.7.0
              depends_on:
                db:
                  condition: service_healthy
              environment:
                CLAIR_MODE: combo
                CLAIR_CONF: /etc/clair/config.yaml
              ports:
                - "6060:6060"
                - "6061:6061"
              volumes:
                - ./clair-config.yaml:/etc/clair/config.yaml:ro
                - ./data:/data:ro
          volumes:
            pgdata:
          EOF
      # ✅ Start Clair
      - name: Start Clair services
        working-directory: clair
        run: |
          docker compose up -d
          echo "⏳ Waiting for Clair to start..."
          for i in {1..30}; do
            if curl -s http://localhost:6061/metrics > /dev/null; then
              echo "✅ Clair is up"
              break
            fi
            sleep 5
          done
      # ✅ Install clairctl
      - name: Install clairctl
        run: |
          go install github.com/quay/clair/v4/cmd/clairctl@latest
          echo "${HOME}/go/bin" >> $GITHUB_PATH
      # 🔑 Login to DockerHub (only for remote image scan, optional if private)
      - name: DockerHub Login
        if: ${{ github.event.inputs.scan_type == 'image' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      # Build, tag, and push Docker image to Docker Hub
      - name: Build, tag, and push Docker image
        if: ${{ github.event.inputs.scan_type == 'dockerfile' }}
        run: |
          IMAGE_NAME=my-local-app:${{ github.sha }}
          docker build -t $IMAGE_NAME -f "${{ github.event.inputs.dockerfile_path }}" .
          DOCKERHUB_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/my-local-app:${{ github.sha }}
          docker tag $IMAGE_NAME $DOCKERHUB_IMAGE
          echo "Logging in to Docker Hub..."
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push $DOCKERHUB_IMAGE
          echo "IMAGE_NAME=$DOCKERHUB_IMAGE" >> $GITHUB_ENV
      # ✅ Set image name for scan
      - name: Set Image for Scan
        run: |
          if [[ "${{ github.event.inputs.scan_type }}" == "image" ]]; then
            echo "IMAGE_NAME=${{ github.event.inputs.image_url }}" >> $GITHUB_ENV
          fi
      # ✅ Run Clair scan
      - name: Run Clair Scan
        run: |
          clairctl report -o json --host http://localhost:6060 "$IMAGE_NAME" > report_raw.json
          cat report_raw.json | jq '.' > report.json
          clairctl report -o table --host http://localhost:6060 "$IMAGE_NAME"
      # ✅ Upload report artifact
      - name: Upload Clair Report
        uses: actions/upload-artifact@v4
        with:
          name: clair-report
          path: report.json

      # ✅ Upload Clair Report to DefectDojo
      - name: Upload Clair report to DefectDojo
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
            -F "file=@report.json;type=application/json" \
            -F "scan_type=Generic Findings Import" \
            -F "engagement_name=clair" \
            -F "product_name=MyProduct" \
            -F "auto_create_context=true"